(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>i});var o=n(354),r=n.n(o),a=n(314),l=n.n(a)()(r());l.push([e.id,"html, body {\n    margin: 0;\n    padding: 0;\n    background-color: greenyellow;\n}\n\n.card{\n    background-color: orange;\n    border-radius: 10px;\n    box-shadow: 5px 5px 5px green;\n\n}\n\n.content{\n    border-style: groove;\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: .1fr;\n    text-align: center;\n    min-height: 100vh;\n}\n\n.books .card{\n    background-color: orange;\n    color: black;\n    text-align: center;\n    height: 400px;\n    display: grid;\n    box-shadow: 5px 5px 5px black;\n}\n\nh1{\n    text-align: center;\n}\n\n.form-heading{\n    border-style: groove;\n}\n\n.form{\n    border-style: groove;\n}\n\n\n#add-todo{\n    display: grid;\n    grid-template-columns: 1fr;\n} \n\nli {\n    list-style-type: none;\n    margin: 5px;\n    border: 1px solid black;\n    text-align: left;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n}\n\n.remove-checklist-item{\n    justify-self: right;\n    cursor: pointer;\n}\n\n#add-to-checklist{\n    margin-bottom: 20px;\n}\n\n.submit-button, .reset-button, .add-todo-button {\n    border-radius: 10px;\n    padding: 5px;\n    box-shadow: 5px 5px 5px black;\n}\n\n.add-to-checklist {\n    border-radius: 10px;\n    box-shadow:  5px 5px 5px black;\n}\n\n.reset-button{\n    margin-left: 20px;\n}\n\n.check-list-label {\n    text-align: left;\n    padding-top: 50px;\n}\n\n.done{\n    text-decoration: line-through;\n    color: gray;\n}\n\n.display-li {\n    cursor: pointer;\n}\n\n.remove-todo-button {\n    grid-row: 5/6;\n    font-weight:  900;\n    background-color: blueviolet;\n    border-radius: 10px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,6BAA6B;AACjC;;AAEA;IACI,wBAAwB;IACxB,mBAAmB;IACnB,6BAA6B;;AAEjC;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,wBAAwB;IACxB,YAAY;IACZ,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;AACxB;;;AAGA;IACI,aAAa;IACb,0BAA0B;AAC9B;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,uBAAuB;IACvB,gBAAgB;IAChB,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,6BAA6B;AACjC;;AAEA;IACI,mBAAmB;IACnB,8BAA8B;AAClC;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,6BAA6B;IAC7B,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,4BAA4B;IAC5B,mBAAmB;AACvB",sourcesContent:["html, body {\n    margin: 0;\n    padding: 0;\n    background-color: greenyellow;\n}\n\n.card{\n    background-color: orange;\n    border-radius: 10px;\n    box-shadow: 5px 5px 5px green;\n\n}\n\n.content{\n    border-style: groove;\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: .1fr;\n    text-align: center;\n    min-height: 100vh;\n}\n\n.books .card{\n    background-color: orange;\n    color: black;\n    text-align: center;\n    height: 400px;\n    display: grid;\n    box-shadow: 5px 5px 5px black;\n}\n\nh1{\n    text-align: center;\n}\n\n.form-heading{\n    border-style: groove;\n}\n\n.form{\n    border-style: groove;\n}\n\n\n#add-todo{\n    display: grid;\n    grid-template-columns: 1fr;\n} \n\nli {\n    list-style-type: none;\n    margin: 5px;\n    border: 1px solid black;\n    text-align: left;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n}\n\n.remove-checklist-item{\n    justify-self: right;\n    cursor: pointer;\n}\n\n#add-to-checklist{\n    margin-bottom: 20px;\n}\n\n.submit-button, .reset-button, .add-todo-button {\n    border-radius: 10px;\n    padding: 5px;\n    box-shadow: 5px 5px 5px black;\n}\n\n.add-to-checklist {\n    border-radius: 10px;\n    box-shadow:  5px 5px 5px black;\n}\n\n.reset-button{\n    margin-left: 20px;\n}\n\n.check-list-label {\n    text-align: left;\n    padding-top: 50px;\n}\n\n.done{\n    text-decoration: line-through;\n    color: gray;\n}\n\n.display-li {\n    cursor: pointer;\n}\n\n.remove-todo-button {\n    grid-row: 5/6;\n    font-weight:  900;\n    background-color: blueviolet;\n    border-radius: 10px;\n}"],sourceRoot:""}]);const i=l},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(l[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&l[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},l=[],i=0;i<e.length;i++){var c=e[i],s=o.base?c[0]+o.base:c[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var A=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var m=r(p,o);o.byIndex=i,t.splice(i,0,{identifier:u,updater:m,references:1})}l.push(u)}return l}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var i=n(a[l]);t[i].references--}for(var c=o(e,r),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var o=n(72),r=n.n(o),a=n(825),l=n.n(a),i=n(659),c=n.n(i),s=n(56),d=n.n(s),u=n(540),A=n.n(u),p=n(113),m=n.n(p),g=n(208),f={};function h(){document.getElementById("add-todo-form").style.display=""}function C(){const e=document.getElementById("add-to-checklist").value;if(""!==e){const t=document.querySelector(".todo-ul"),n=document.createElement("li");n.textContent=e;const o=document.createElement("span");o.className="remove-checklist-item";const r=document.createTextNode("Ã—");if(n.appendChild(o),o.appendChild(r),t.appendChild(n),document.getElementById("add-to-checklist").value="",document.querySelectorAll("li").length>0){console.log("INSIDE MODULE IF....",document.querySelectorAll("li").length);const e=document.querySelectorAll("li");console.log(e),e.forEach((e=>{e.addEventListener("click",(function(){e.remove()}))}))}}}function y(){const e=document.querySelectorAll("li");for(let t=0;t<e.length;t++)e[t].remove();document.getElementById("add-todo").reset()}function b(){let e=localStorage.getItem("Title"),t=localStorage.getItem("Description"),n=localStorage.getItem("DueDate"),o=localStorage.getItem("Priority"),r=localStorage.getItem("CheckList");if(null==e||null==t||null==n||null==o)return;const a=document.querySelectorAll(".card");for(let e=0;e<a.length;e++)a[e].remove();console.log("display to screen");const l=document.querySelector(".projects"),i=document.createElement("div");i.classList.add("card"),l.appendChild(i);const c=document.createElement("button");c.classList.add("remove-todo-button"),c.textContent="Delete/Complete To Do",i.appendChild(c),c.addEventListener("click",(function(){i.remove(),localStorage.clear()}));let s={Title:e,Description:t,DueDate:n,Priority:o,CheckList:r};console.log(s);for(let e in s){console.log(`${e}: ${s[e]}`);const t=document.createElement("p");t.textContent=`${e}: ${s[e]}`,i.appendChild(t)}document.querySelectorAll("p");const d=document.createElement("p");d.textContent="CheckList Items (Click item when completed):";const u=document.createElement("ul");d.classList.add("check-list-label"),u.appendChild(d),console.log("show me the contents of checklist from local storage...",r);let A=r.split(",");if(console.log("contents of temp checklistarray....",A),""!==r){for(let e=0;e<A.length;e++){console.log(A[e]);const t=document.createElement("li");t.className="display-li",t.textContent=A[e],t.addEventListener("click",(function(){t.classList.toggle("done")?localStorage.setItem(t.textContent,"true"):t.classList.toggle("display-li")&&localStorage.setItem(t.textContent,"false")})),u.appendChild(t)}window.onload=function(){document.querySelectorAll(".display-li").forEach((e=>{"true"==localStorage.getItem(e.textContent)&&(console.log("inside the onload if...."),e.className="done")}))}}}f.styleTagTransform=m(),f.setAttributes=d(),f.insert=c().bind(null,"head"),f.domAPI=l(),f.insertStyleElement=A(),r()(g.A,f),g.A&&g.A.locals&&g.A.locals,Math.pow(10,8);const B=36e5;function I(e,t){const n=t?.additionalDigits??2,o=function(e){const t={},n=e.split(v.dateTimeDelimiter);let o;if(n.length>2)return t;if(/:/.test(n[0])?o=n[0]:(t.date=n[0],o=n[1],v.timeZoneDelimiter.test(t.date)&&(t.date=e.split(v.timeZoneDelimiter)[0],o=e.substr(t.date.length,e.length))),o){const e=v.timezone.exec(o);e?(t.time=o.replace(e[1],""),t.timezone=e[1]):t.time=o}return t}(e);let r;if(o.date){const e=function(e,t){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),o=e.match(n);if(!o)return{year:NaN,restDateString:""};const r=o[1]?parseInt(o[1]):null,a=o[2]?parseInt(o[2]):null;return{year:null===a?r:100*a,restDateString:e.slice((o[1]||o[2]).length)}}(o.date,n);r=function(e,t){if(null===t)return new Date(NaN);const n=e.match(x);if(!n)return new Date(NaN);const o=!!n[4],r=E(n[1]),a=E(n[2])-1,l=E(n[3]),i=E(n[4]),c=E(n[5])-1;if(o)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,i,c)?function(e,t,n){const o=new Date(0);o.setUTCFullYear(e,0,4);const r=7*(t-1)+n+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}(t,i,c):new Date(NaN);{const e=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(S[t]||(N(e)?29:28))}(t,a,l)&&function(e,t){return t>=1&&t<=(N(e)?366:365)}(t,r)?(e.setUTCFullYear(t,a,Math.max(r,l)),e):new Date(NaN)}}(e.restDateString,e.year)}if(!r||isNaN(r.getTime()))return new Date(NaN);const a=r.getTime();let l,i=0;if(o.time&&(i=function(e){const t=e.match(D);if(!t)return NaN;const n=w(t[1]),o=w(t[2]),r=w(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,o,r)?n*B+6e4*o+1e3*r:NaN}(o.time),isNaN(i)))return new Date(NaN);if(!o.timezone){const e=new Date(a+i),t=new Date(0);return t.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),t.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),t}return l=function(e){if("Z"===e)return 0;const t=e.match(k);if(!t)return 0;const n="+"===t[1]?-1:1,o=parseInt(t[2]),r=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,r)?n*(o*B+6e4*r):NaN}(o.timezone),isNaN(l)?new Date(NaN):new Date(a+i+l)}const v={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},x=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,D=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,k=/^([+-])(\d{2})(?::?(\d{2}))?$/;function E(e){return e?parseInt(e):1}function w(e){return e&&parseFloat(e.replace(",","."))||0}const S=[31,null,31,30,31,30,31,31,30,31,30,31];function N(e){return e%400==0||e%4==0&&e%100!=0}function T(e){const t=function(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}(e);return t.setHours(0,0,0,0),t}function j(){return T(Date.now())}let L=[];(()=>{console.log("Called blankProjectLoad module... creating blank project array");let e=[];console.log("Pushing the title name of project to the projectsArray");e.push({projectTitle:"Default Project"}),console.log(e)})(),b();const U=document.querySelector(".submit-button");U.addEventListener("click",(()=>{let e=document.getElementById("Title").value,t=document.getElementById("Description").value,n=document.getElementById("DueDate").value,o=document.getElementById("Priority").value;if(""==e||""==t||""==n)return void alert("Fill out all the fields please!");if(I(n)<j())return alert("This date has already passed! Enter a valid date. Please."),console.log("due date",I(n)),void console.log("date now",j());const r=document.querySelectorAll("li");let a=[];for(let e=0;e<r.length;e++){let t=r[e].textContent.replace("Ã—","");a.push(t)}let l=a.join(", ");return console.log("Called createToDo module... creating todo now"),console.log({Title:e,Description:t,DueDate:n,Priority:o,CheckList:l}),console.log("Pushing this object to the toDoArray..."),L.push({Title:e,Description:t,DueDate:n,Priority:o,CheckList:l}),console.log(L),function({Title:e,Description:t,DueDate:n,Priority:o,CheckList:r}){console.log("Saving object to local storage..."),localStorage.setItem("Title",document.getElementById("Title").value),localStorage.setItem("Description",document.getElementById("Description").value),localStorage.setItem("DueDate",document.getElementById("DueDate").value),localStorage.setItem("Priority",document.getElementById("Priority").value),localStorage.setItem("CheckList",r),b()}({Title:e,Description:t,DueDate:n,Priority:o}),y(),l})),U.addEventListener("click",y),document.querySelector(".add-todo-button").addEventListener("click",h),document.querySelector(".add-to-checklist").addEventListener("click",C),document.querySelector(".reset-button").addEventListener("click",y)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,